@using ALViN.Data
@implements IDisposable
@attribute [StreamRendering(true)]

<h2>Beacon List</h2>
@if (@beacons == null)
{
    <p><em>Loading...</em></p>
}
else{
<table class="BeaconList" style="width:100%">
    <thead>
        <tr>
            <th>Beacon Name</th>
            <th>UUID</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody> 
        @foreach (Beacon beacon in @beacons)
        {
            <tr>
                <td style="font-weight: bold;">@beacon.Name</td>
                <td>@beacon.Uuid</td>
                <td><button type="Submit" value="@beacon.Id">Delete</button></td>
            </tr>
        }
    </tbody>
</table>
}

@code
{
    public List<Beacon>? beacons;
    private Timer _timer;
    private int TimerSec;

    private readonly string logName = "AssetCounter";
    protected override async Task OnInitializedAsync()
    {        
        TimerSec = Settings.GetIntSetting("APICallTimerInSec");
        Logger.Log(logName, "Set API Timer to " + TimerSec);
        _timer = new(async _ => {
            beacons = await StorageManager.GetBeaconsAsync();
            await InvokeAsync(StateHasChanged);
        },null,0,TimerSec*1000);
    }
    
    private async void HandleValidSubmit(){
        //StorageManager.DeleteBeaconFromDatabase(beacons[])
    }
    void IDisposable.Dispose(){
        Logger.Log(logName,"Disposed of Beacon List");
        _timer.Dispose();
    }  
}