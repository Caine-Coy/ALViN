@using ALViN.Data
@implements IDisposable
@attribute [StreamRendering(true)]

@if (detectedDevices!=null){
<div class="alert alert-secondary mt-4">
    <span class="oi oi-pencil me-2" aria-hidden="true">@detectedDevices.Count devices found out of @totalDevices.Count total devices</span>
</div>
}
@if (@totalDevices == null)
{
    <p><em>Loading...</em></p>
}
else{
<table class="DeviceList">
    <thead>
        <tr>
            <th>Device</th>
            <th>Location</th>
            <th>Last Detected</th>
        </tr>
    </thead>
    <tbody> 
        @foreach (Device device in @totalDevices)
        {
            <tr>
                <td>@device.Name</td>
                <td>@device.LastBeacon?.Name</td>
                <td>@device.LastDetected</td>
            </tr>
        }
    </tbody>
</table>
}

@code
{
    public List<Device>? totalDevices;
    public List<Device>? detectedDevices;

    private int TimerSec = Settings.GetIntSetting("APICallTimerInSec");
    Timer _timer;

    private readonly string logName = "AssetCounter";
    protected override async Task OnInitializedAsync()
    {        
        Logger.Log(logName, "Set API Timer to " + TimerSec);
        _timer = new(async _ => {
            totalDevices = await DeviceHandler.GetAllDevicesAsync();
            Console.WriteLine("Loggin");
            await InvokeAsync(StateHasChanged);
        },null,0,TimerSec*1000);

    }

    void IDisposable.Dispose(){
        Logger.Log(logName,"Disposed of Asset Counter");
        _timer.Dispose();
    }  
}