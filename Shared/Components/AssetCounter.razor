@using ALViN.Data
@implements IDisposable
@attribute [StreamRendering(true)]

@if (@totalDevices == null)
{
    <p><em>Loading...</em></p>
}
else{
<table class="DeviceList" style="width:100%">
    <thead>
        <tr>
            <th >Device</th>
            <th>Location</th>
            <th>Last Detected</th>
        </tr>
    </thead>
    <tbody> 
        @foreach (Device device in @totalDevices)
        {
            <tr>
                <td style="font-weight: bold;">@device.Name</td>
                <td>@device.LastBeacon?.Name</td>
                <td>@device.LastDetected</td>
            </tr>
        }
    </tbody>
</table>
}

@code
{
    public List<Device>? totalDevices;
    public List<Device>? detectedDevices;
    private Timer _timer;
    private int TimerSec;

    private readonly string logName = "AssetCounter";
    protected override async Task OnInitializedAsync()
    {        
        TimerSec = Settings.GetIntSetting("APICallTimerInSec");
        _timer = new(async _ => {
            UpdateList();
        },null,0,TimerSec*1000);

    }

    private async void UpdateList(){
        totalDevices = await StorageManager.GetDevicesAsync();
        await InvokeAsync(StateHasChanged);
    }
    void IDisposable.Dispose(){
        Logger.Log(logName,"Disposed of Asset Counter");
        _timer.Dispose();
    }  
}